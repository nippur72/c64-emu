/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={693:function(t,e,n){var o,r=r||function(t){"use strict";if(!(void 0===t||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var e=t.document,n=function(){return t.URL||t.webkitURL||t},o=e.createElementNS("http://www.w3.org/1999/xhtml","a"),r="download"in o,s=/constructor/i.test(t.HTMLElement)||t.safari,i=/CriOS\/[\d]+/.test(navigator.userAgent),a=function(e){(t.setImmediate||t.setTimeout)((function(){throw e}),0)},c=function(t){setTimeout((function(){"string"==typeof t?n().revokeObjectURL(t):t.remove()}),4e4)},u=function(t){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob([String.fromCharCode(65279),t],{type:t.type}):t},h=function(e,h,l){l||(e=u(e));var d,p=this,_="application/octet-stream"===e.type,f=function(){!function(t,e,n){for(var o=(e=[].concat(e)).length;o--;){var r=t["on"+e[o]];if("function"==typeof r)try{r.call(t,t)}catch(t){a(t)}}}(p,"writestart progress write writeend".split(" "))};if(p.readyState=p.INIT,r)return d=n().createObjectURL(e),void setTimeout((function(){var t,e;o.href=d,o.download=h,t=o,e=new MouseEvent("click"),t.dispatchEvent(e),f(),c(d),p.readyState=p.DONE}));!function(){if((i||_&&s)&&t.FileReader){var o=new FileReader;return o.onloadend=function(){var e=i?o.result:o.result.replace(/^data:[^;]*;/,"data:attachment/file;");t.open(e,"_blank")||(t.location.href=e),e=void 0,p.readyState=p.DONE,f()},o.readAsDataURL(e),void(p.readyState=p.INIT)}d||(d=n().createObjectURL(e)),_?t.location.href=d:t.open(d,"_blank")||(t.location.href=d),p.readyState=p.DONE,f(),c(d)}()},l=h.prototype;return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(t,e,n){return e=e||t.name||"download",n||(t=u(t)),navigator.msSaveOrOpenBlob(t,e)}:(l.abort=function(){},l.readyState=l.INIT=0,l.WRITING=1,l.DONE=2,l.error=l.onwritestart=l.onprogress=l.onwrite=l.onabort=l.onerror=l.onwriteend=null,function(t,e,n){return new h(t,e||t.name||"download",n)})}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);t.exports?t.exports.saveAs=r:null!==n.amdD&&null!==n.amdO&&(void 0===(o=function(){return r}.call(e,n,e,t))||(t.exports=o))},851:(t,e,n)=>{"use strict";t.exports=n.p+"17b9ed45488d86f8daef.wasm"}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var s=e[o]={exports:{}};return t[o].call(s.exports,s,s.exports,n),s.exports}n.m=t,n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var o=e.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!t;)t=o[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,(()=>{"use strict";var t;const e=(t="file:///C:/Users/Computer/Desktop/USB/GitHub/c64-emu/emscripten_module.js",function(e={}){var o,r,s=void 0!==e?e:{};s.ready=new Promise((function(t,e){o=t,r=e}));var i,a=Object.assign({},s),c="";"undefined"!=typeof document&&document.currentScript&&(c=document.currentScript.src),t&&(c=t),c=0!==c.indexOf("blob:")?c.substr(0,c.replace(/[?#].*/,"").lastIndexOf("/")+1):"",s.print||console.log.bind(console);var u,h=s.printErr||console.warn.bind(console);Object.assign(s,a),a=null,s.arguments&&s.arguments,s.thisProgram&&s.thisProgram,s.quit&&s.quit,s.wasmBinary&&(u=s.wasmBinary),s.noExitRuntime,"object"!=typeof WebAssembly&&g("no native wasm support detected");var l,d,p,_,f=!1,m="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function y(t,e){return t?function(t,e,n){for(var o=e+n,r=e;t[r]&&!(r>=o);)++r;if(r-e>16&&t.buffer&&m)return m.decode(t.subarray(e,r));for(var s="";e<r;){var i=t[e++];if(128&i){var a=63&t[e++];if(192!=(224&i)){var c=63&t[e++];if((i=224==(240&i)?(15&i)<<12|a<<6|c:(7&i)<<18|a<<12|c<<6|63&t[e++])<65536)s+=String.fromCharCode(i);else{var u=i-65536;s+=String.fromCharCode(55296|u>>10,56320|1023&u)}}else s+=String.fromCharCode((31&i)<<6|a)}else s+=String.fromCharCode(i)}return s}(d,t,e):""}var w=[],A=[],C=[],v=0,b=null,R=null;function g(t){s.onAbort&&s.onAbort(t),h(t="Aborted("+t+")"),f=!0,t+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(t);throw r(e),e}var T,S;function E(t){return t.startsWith("data:application/octet-stream;base64,")}function x(t){try{if(t==T&&u)return new Uint8Array(u);if(i)return i(t);throw"both async and sync fetching of the wasm failed"}catch(t){g(t)}}s.locateFile?E(T="emscripten_module.wasm")||(S=T,T=s.locateFile?s.locateFile(S,c):c+S):T=new URL(n(851),n.b).href;var k={54768:()=>cbm_6499_reset(),54797:(t,e)=>{audio_buf_ready(t,e)},54826:t=>{vdp_screen_update(t)},54853:t=>{vdp_screen_update(t)},54880:t=>{vdp_screen_update(t)},54907:t=>modem_read(t),54934:(t,e)=>{modem_write(t,e)},54958:(t,e)=>cbm_6499_read(t,e),54992:(t,e)=>{cbm_6499_write(t,e)}};function U(t){for(;t.length>0;)t.shift()(s)}var I=[];function L(t){return s["_"+t]}function B(t,e,n,o,r){var s={string:t=>{var e=0;if(null!=t&&0!==t){var n=1+(t.length<<2);!function(t,e,n){!function(t,e,n,o){if(!(o>0))return 0;for(var r=n+o-1,s=0;s<t.length;++s){var i=t.charCodeAt(s);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&t.charCodeAt(++s)),i<=127){if(n>=r)break;e[n++]=i}else if(i<=2047){if(n+1>=r)break;e[n++]=192|i>>6,e[n++]=128|63&i}else if(i<=65535){if(n+2>=r)break;e[n++]=224|i>>12,e[n++]=128|i>>6&63,e[n++]=128|63&i}else{if(n+3>=r)break;e[n++]=240|i>>18,e[n++]=128|i>>12&63,e[n++]=128|i>>6&63,e[n++]=128|63&i}}e[n]=0}(t,d,e,n)}(t,e=F(n),n)}return e},array:t=>{var e,n,o=F(t.length);return e=t,n=o,l.set(e,n),o}},i=L(t),a=[],c=0;if(o)for(var u=0;u<o.length;u++){var h=s[n[u]];h?(0===c&&(c=O()),a[u]=h(o[u])):a[u]=o[u]}var p=i.apply(null,a);return function(t){return 0!==c&&N(c),function(t){return"string"===e?y(t):"boolean"===e?Boolean(t):t}(t)}(p)}var P,D={a:function(t,e,n,o){g("Assertion failed: "+y(t)+", at: "+[e?y(e):"unknown filename",n,o?y(o):"unknown function"])},b:function(t,e,n){return function(t,e,n){var o=function(t,e){var n;for(I.length=0,e>>=2;n=d[t++];)e+=105!=n&e,I.push(105==n?p[e]:_[e++>>1]),++e;return I}(e,n);return k[t].apply(null,o)}(t,e,n)},c:function(t,e,n){d.copyWithin(t,e,e+n)}},O=(function(){var t={a:D};function e(t,e){var n,o,r=t.exports;s.asm=r,n=s.asm.d.buffer,s.HEAP8=l=new Int8Array(n),s.HEAP16=new Int16Array(n),s.HEAP32=p=new Int32Array(n),s.HEAPU8=d=new Uint8Array(n),s.HEAPU16=new Uint16Array(n),s.HEAPU32=new Uint32Array(n),s.HEAPF32=new Float32Array(n),s.HEAPF64=_=new Float64Array(n),s.asm.C,o=s.asm.e,A.unshift(o),function(t){if(v--,s.monitorRunDependencies&&s.monitorRunDependencies(v),0==v&&(null!==b&&(clearInterval(b),b=null),R)){var e=R;R=null,e()}}()}function n(t){e(t.instance)}function o(e){return(u||"function"!=typeof fetch?Promise.resolve().then((function(){return x(T)})):fetch(T,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at '"+T+"'";return t.arrayBuffer()})).catch((function(){return x(T)}))).then((function(e){return WebAssembly.instantiate(e,t)})).then((function(t){return t})).then(e,(function(t){h("failed to asynchronously prepare wasm: "+t),g(t)}))}if(v++,s.monitorRunDependencies&&s.monitorRunDependencies(v),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(t){h("Module.instantiateWasm callback failed with error: "+t),r(t)}(u||"function"!=typeof WebAssembly.instantiateStreaming||E(T)||"function"!=typeof fetch?o(n):fetch(T,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,t).then(n,(function(t){return h("wasm streaming compile failed: "+t),h("falling back to ArrayBuffer instantiation"),o(n)}))}))).catch(r)}(),s._sys_init=function(){return(s._sys_init=s.asm.f).apply(null,arguments)},s._sys_config=function(){return(s._sys_config=s.asm.g).apply(null,arguments)},s._sys_reset=function(){return(s._sys_reset=s.asm.h).apply(null,arguments)},s._sys_exec=function(){return(s._sys_exec=s.asm.i).apply(null,arguments)},s._sys_exec_us=function(){return(s._sys_exec_us=s.asm.j).apply(null,arguments)},s._sys_ex=function(){return(s._sys_ex=s.asm.k).apply(null,arguments)},s._sys_vdp=function(){return(s._sys_vdp=s.asm.l).apply(null,arguments)},s._sys_key_down=function(){return(s._sys_key_down=s.asm.m).apply(null,arguments)},s._sys_key_up=function(){return(s._sys_key_up=s.asm.n).apply(null,arguments)},s._sys_quick_load=function(){return(s._sys_quick_load=s.asm.o).apply(null,arguments)},s._sys_insert_rom_cartdrige=function(){return(s._sys_insert_rom_cartdrige=s.asm.p).apply(null,arguments)},s._sys_mem_cpu_rd=function(){return(s._sys_mem_cpu_rd=s.asm.q).apply(null,arguments)},s._sys_mem_cpu_wr=function(){return(s._sys_mem_cpu_wr=s.asm.r).apply(null,arguments)},s._sys_joystick=function(){return(s._sys_joystick=s.asm.s).apply(null,arguments)},s._sys_set_joystick_type=function(){return(s._sys_set_joystick_type=s.asm.t).apply(null,arguments)},s._sys_insert_tape=function(){return(s._sys_insert_tape=s.asm.u).apply(null,arguments)},s._sys_remove_tape=function(){return(s._sys_remove_tape=s.asm.v).apply(null,arguments)},s._sys_tape_play=function(){return(s._sys_tape_play=s.asm.w).apply(null,arguments)},s._sys_tape_stop=function(){return(s._sys_tape_stop=s.asm.x).apply(null,arguments)},s._sys_cas_port=function(){return(s._sys_cas_port=s.asm.y).apply(null,arguments)},s._sys_set_exrom=function(){return(s._sys_set_exrom=s.asm.z).apply(null,arguments)},s._sys_set_cbm_6499_nbank=function(){return(s._sys_set_cbm_6499_nbank=s.asm.A).apply(null,arguments)},s._sys_set_emulate_cbm_6499=function(){return(s._sys_set_emulate_cbm_6499=s.asm.B).apply(null,arguments)},function(){return(O=s.asm.D).apply(null,arguments)}),N=function(){return(N=s.asm.E).apply(null,arguments)},F=function(){return(F=s.asm.F).apply(null,arguments)};function j(){function t(){P||(P=!0,s.calledRun=!0,f||(U(A),o(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),function(){if(s.postRun)for("function"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;)t=s.postRun.shift(),C.unshift(t);var t;U(C)}()))}v>0||(function(){if(s.preRun)for("function"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)t=s.preRun.shift(),w.unshift(t);var t;U(w)}(),v>0||(s.setStatus?(s.setStatus("Running..."),setTimeout((function(){setTimeout((function(){s.setStatus("")}),1),t()}),1)):t()))}if(s.ccall=B,s.cwrap=function(t,e,n,o){var r=!n||n.every((t=>"number"===t||"boolean"===t));return"string"!==e&&r&&!o?L(t):function(){return B(t,e,n,arguments)}},R=function t(){P||j(),P||(R=t)},s.preInit)for("function"==typeof s.preInit&&(s.preInit=[s.preInit]);s.preInit.length>0;)s.preInit.pop()();return j(),e.ready});function o(t,e){void 0===e&&(e=2);let n="0000"+t.toString(16);return n.substr(n.length-e)}function r(t){for(;0!==J.peek(198);)J.ex(16e3);J.poke(631,t),J.poke(198,1)}var s=n(693),i=function(t,e,n,o){return new(n||(n=Promise))((function(r,s){function i(t){try{c(o.next(t))}catch(t){s(t)}}function a(t){try{c(o.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,a)}c((o=o.apply(t,e||[])).next())}))};function a(t){c(t)}function c(t){0===J.mem_read(204)?(function(t){J.load_prg(t,t.length),function(t){for(let e=0;e<t.length;e++)r(t.charCodeAt(e))}("RUN\r")}(t),console.log(`loaded ${t.length} bytes`)):setTimeout((()=>c(t)),100)}var u=function(t,e,n,o){return new(n||(n=Promise))((function(r,s){function i(t){try{c(o.next(t))}catch(t){s(t)}}function a(t){try{c(o.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,a)}c((o=o.apply(t,e||[])).next())}))};function h(t){return u(this,void 0,void 0,(function*(){try{const e=yield fetch(`software/${t}`);return 404!==e.status&&(a(new Uint8Array(yield e.arrayBuffer())),!0)}catch(t){return!1}}))}window.mdawson_loadBytes=a,window.loadPrg=function(t){if(1!==t.length)return;let e=function(t){for(var e=0,n=0,o=[],r=0,s=0;s<t.length;s++)e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.!".indexOf(t[s])<<n,(n+=6)>=8&&(o[r++]=255&e,n-=8,e>>=8);return o}(t[0]);mdawson_loadBytes(new Uint8Array(e))};class l{constructor(){this.started=!1,this.pulses=0,this.telnumber=[],this.old_PB6=0,this.old_PB5=0,this.afterdialtone=t=>{}}tick(t,e,n){this.started?(0===t&&1===this.old_PB6&&(this.pulses++,new Audio("dialtone_click.mp3").play()),1===t&&this.old_PB6,0===e&&1===this.old_PB5&&(this.telnumber.push(this.pulses%10),this.pulses=0,this.finish_timer&&clearTimeout(this.finish_timer),this.finish_timer=setTimeout((()=>{this.number_composed(this.telnumber.join("")),this.finish_timer=void 0}),3e3))):1===e&&0===this.old_PB5&&(this.started=!0,this.pulses=0,this.telnumber=[],console.log("dialing started")),this.old_PB5=e,this.old_PB6=t}number_composed(t){console.log(`dialing completed! called ${t}`),this.started=!1,this.afterdialtone(t)}}class d{constructor(t,e){this.rx_buffer=[],this.rx_ticks=0,this.tx_ticks=0,this.rx_max_count=985248/(t/9),this.tx_max_count=985248/(e/9)}reset(){this.rx_buffer=[]}push_rx_data(t){t.forEach((t=>this.rx_buffer.push(t)))}rx_full(t){return t-this.rx_ticks<this.rx_max_count||0===this.rx_buffer.length?0:1}read_byte(t){this.rx_ticks=t;let e=this.rx_buffer[0];return this.rx_buffer=this.rx_buffer.slice(1),e}tx_empty(t){return t-this.tx_ticks<this.tx_max_count?0:1}tx_byte_sent(t){this.tx_ticks=t}}const p=[{bits:7,parity:"even",stop_bits:2},{bits:7,parity:"odd",stop_bits:2},{bits:7,parity:"even",stop_bits:1},{bits:7,parity:"odd",stop_bits:1},{bits:8,parity:"none",stop_bits:2},{bits:8,parity:"none",stop_bits:1},{bits:8,parity:"even",stop_bits:1},{bits:8,parity:"odd",stop_bits:1}];class _{constructor(){this.address="",this.on_error=t=>{},this.on_open=()=>{},this.on_close=()=>{},this.on_data=t=>{},this.connected=!1}connect(){let t=""===this.protocol?void 0:this.protocol;this.ws_connection=new WebSocket(`${this.address}`,t),this.ws_connection.binaryType="arraybuffer",this.ws_connection.onerror=t=>{console.log("websocket connection error"),this.connected=!1,this.on_error(t)},this.ws_connection.onopen=()=>{console.log("websocket connected"),this.connected=!0,this.on_open()},this.ws_connection.onclose=()=>{console.log("websocket disconnected"),this.connected=!1,this.on_close()},this.ws_connection.onmessage=t=>{t.data instanceof ArrayBuffer?(this.on_data(new Uint8Array(t.data)),Array.from(new Uint8Array(t.data))):console.log(`websocket Received string: '${t.data}'`)}}send_data_to_bbs(t){let e=new Uint8Array(t);void 0!==this.ws_connection&&this.ws_connection.readyState===this.ws_connection.OPEN?this.ws_connection.send(e):console.log("websocket disconnected, can't send!")}close(){void 0!==this.ws_connection&&(this.ws_connection.close(),this.connected=!1)}}let f=new class{constructor(){this.CRA=0,this.CRB=0,this.PA=0,this.PB=0,this.DDRA=0,this.DDRB=0,this.number_decoder=new l}reset(){this.CRA=0,this.CRB=0,this.PA=0,this.PB=0,this.DDRA=0,this.DDRB=0,J.set_cbm_6499_nbank(1)}read(t){let e=this.CRA>>2&1,n=this.CRB>>2&1,r=3&t;return 0===r&&1===e?(o(this.PA,2),this.CRA=63&this.CRA,this.PA):0===r&&0===e?(o(this.DDRA,2),this.DDRA):1===r?(o(this.CRA,2),this.CRA):2===r&&1===n?(o(this.PB,2),this.CRB=63&this.CRB,this.PB):2===r&&0===n?(o(this.DDRB,2),this.DDRB):3===r?(o(this.CRB,2),this.CRB):void 0}write(t,e){let n=this.CRA>>2&1,o=this.CRB>>2&1,r=3&t;1===r?this.write_CRA(e):3===r?this.write_CRB(e):0===r&&1===n?this.write_PA(e):0===r&&0===n?this.write_DDRA(e):2===r&&1===o?this.write_PB(e):2===r&&0===o&&this.write_DDRB(e)}write_CRA(t){if(this.CRA=t,48&t){let e=t>>3&1;J.set_cbm_6499_nbank(e)}o(t,2)}write_CRB(t){if(this.CRB=t,48&t){let e=t>>3&1;J.set_exrom(!!e)}o(t,2)}write_DDRA(t){this.DDRA=t,t.toString(16)}write_DDRB(t){this.DDRB=t,t.toString(16)}write_PA(t){this.PA=t,o(t,2)}write_PB(t){let e=t>>5&1,n=(this.PB,t>>6&1);this.PB,this.PB,this.number_decoder.tick(n,e,t),this.PB=t,o(t,2)}},m=new class{constructor(){this.CONTROL=0,this.TRANSMIT_DATA=0,this.RECEIVE_DATA=0,this.STATUS_RECEIVER_FULL=0,this.STATUS_TRANSMITTER_EMPTY=1,this.STATUS_NO_CARRIER=1,this.STATUS_CLEAR_TO_SEND=0,this.STATUS_FRAMING_ERROR=0,this.STATUS_RECEIVER_OVERRUN=0,this.STATUS_PARITY_ERROR=0,this.STATUS_IRQ=0,this.limiter=new d(1200,1200),this.transmit_data=t=>{}}get_status_byte(t){return this.STATUS_RECEIVER_FULL=this.limiter.rx_full(t),this.STATUS_TRANSMITTER_EMPTY=this.limiter.tx_empty(t),this.STATUS_RECEIVER_FULL<<0|this.STATUS_TRANSMITTER_EMPTY<<1|this.STATUS_NO_CARRIER<<2|this.STATUS_CLEAR_TO_SEND<<3|this.STATUS_FRAMING_ERROR<<4|this.STATUS_RECEIVER_OVERRUN<<5|this.STATUS_PARITY_ERROR<<6|this.STATUS_IRQ<<7}cpu_read(t,e){return 0==(1&t)?this.get_status_byte(e):(this.get_status_byte(e),this.STATUS_RECEIVER_FULL&&(this.RECEIVE_DATA=this.limiter.read_byte(e)),this.RECEIVE_DATA)}cpu_write(t,e,n){if(0==(1&t)){e.toString(2),this.CONTROL=e;let t=3&this.CONTROL,n=(28&this.CONTROL)>>2,o=(96&this.CONTROL)>>5;this.CONTROL,3===t&&(this.limiter.reset(),this.TRANSMIT_DATA=0,this.RECEIVE_DATA=0,this.STATUS_RECEIVER_FULL=0,this.STATUS_TRANSMITTER_EMPTY=1,this.STATUS_CLEAR_TO_SEND=0,this.STATUS_FRAMING_ERROR=0,this.STATUS_RECEIVER_OVERRUN=0,this.STATUS_PARITY_ERROR=0,this.STATUS_IRQ=0);let{bits:r,parity:s,stop_bits:i}=p[n];o.toString(2)}else this.TRANSMIT_DATA=e,this.transmit_data(this.TRANSMIT_DATA),this.limiter.tx_byte_sent(n)}receive_data(t){this.limiter.push_rx_data(t),t.length}},y=new _;window.ACIA=m,window.PIA=f,window.videotel=y,y.on_error=()=>{m.STATUS_NO_CARRIER=1,console.log("NO CARRIER")},y.on_close=()=>{m.STATUS_NO_CARRIER=1,console.log("NO CARRIER")},y.on_open=()=>{m.STATUS_NO_CARRIER=0,f.PA&=127,console.log("CARRIER DETECT")},y.on_data=t=>{m.receive_data(t)},m.transmit_data=t=>{y.send_data_to_bbs([t])},f.number_decoder.afterdialtone=t=>{y.connect()},window.ring=function(){let t=0;!function e(){t<13?(f.CRA=191,f.PA=255,setTimeout(e,100),t++):setTimeout((()=>y.connect()),3e3)}()};var w=function(t,e,n,o){return new(n||(n=Promise))((function(r,s){function i(t){try{c(o.next(t))}catch(t){s(t)}}function a(t){try{c(o.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,a)}c((o=o.apply(t,e||[])).next())}))};let A=document.getElementById("canvas").getContext("2d");var C=function(t,e,n,o){return new(n||(n=Promise))((function(r,s){function i(t){try{c(o.next(t))}catch(t){s(t)}}function a(t){try{c(o.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,a)}c((o=o.apply(t,e||[])).next())}))};let v=[];const b=1024;let R,g,T,S;function E(){R=new window.AudioContext,g=R.createScriptProcessor(b,1,1),g.onaudioprocess=function(t){const e=t.outputBuffer.getChannelData(0);if(0===v.length)return;if(v.length>10)return void(v=[]);const n=v[0];v=v.slice(1);for(let t=0;t<b;t++)e[t]=n[t]}}function x(){void 0===R&&E(),void 0!==g&&void 0!==R&&(g.connect(R.destination),T=!0,v=[])}function k(){return C(this,void 0,void 0,(function*(){void 0===R&&E(),void 0===T&&x(),void 0!==g&&void 0!==R&&"suspended"===R.state&&(yield R.resume(),v=[])}))}function U(t,e,n,o,r,s){let i=[];return"1"===e&&i.push("1".charCodeAt(0)),"2"===e&&i.push("2".charCodeAt(0)),"3"===e&&i.push("3".charCodeAt(0)),"4"===e&&i.push("4".charCodeAt(0)),"5"===e&&i.push("5".charCodeAt(0)),"6"===e&&i.push("6".charCodeAt(0)),"7"===e&&i.push("7".charCodeAt(0)),"8"===e&&i.push("8".charCodeAt(0)),"9"===e&&i.push("9".charCodeAt(0)),"0"===e&&i.push("0".charCodeAt(0)),"!"===e&&i.push("!".charCodeAt(0)),'"'===e&&i.push('"'.charCodeAt(0)),"£"===e&&i.push("~".charCodeAt(0)),"#"===e&&i.push("#".charCodeAt(0)),"$"===e&&i.push("$".charCodeAt(0)),"%"===e&&i.push("%".charCodeAt(0)),"&"===e&&i.push("&".charCodeAt(0)),"/"===e&&i.push("/".charCodeAt(0)),"("===e&&i.push("(".charCodeAt(0)),")"===e&&i.push(")".charCodeAt(0)),"="===e&&i.push("=".charCodeAt(0)),"'"===e&&i.push("'".charCodeAt(0)),"?"===e&&i.push("?".charCodeAt(0)),"^"===e&&i.push("^".charCodeAt(0)),"["===e&&i.push("[".charCodeAt(0)),"]"===e&&i.push("]".charCodeAt(0)),"°"===e&&i.push("[".charCodeAt(0)),"§"===e&&i.push("]".charCodeAt(0)),"+"===e&&i.push("+".charCodeAt(0)),"*"===e&&i.push("*".charCodeAt(0)),"ç"===e&&i.push("@".charCodeAt(0)),"@"===e&&i.push("@".charCodeAt(0)),"#"===e&&i.push("#".charCodeAt(0)),"<"===e&&i.push("<".charCodeAt(0)),">"===e&&i.push(">".charCodeAt(0)),","===e&&i.push(",".charCodeAt(0)),";"===e&&i.push(";".charCodeAt(0)),"."===e&&i.push(".".charCodeAt(0)),":"===e&&i.push(":".charCodeAt(0)),"-"===e&&i.push("-".charCodeAt(0)),"q"===e&&i.push("q".toUpperCase().charCodeAt(0)),"w"===e&&i.push("w".toUpperCase().charCodeAt(0)),"e"===e&&i.push("e".toUpperCase().charCodeAt(0)),"r"===e&&i.push("r".toUpperCase().charCodeAt(0)),"t"===e&&i.push("t".toUpperCase().charCodeAt(0)),"y"===e&&i.push("y".toUpperCase().charCodeAt(0)),"u"===e&&i.push("u".toUpperCase().charCodeAt(0)),"i"===e&&i.push("i".toUpperCase().charCodeAt(0)),"o"===e&&i.push("o".toUpperCase().charCodeAt(0)),"p"===e&&i.push("p".toUpperCase().charCodeAt(0)),"a"===e&&i.push("a".toUpperCase().charCodeAt(0)),"s"===e&&i.push("s".toUpperCase().charCodeAt(0)),"d"===e&&i.push("d".toUpperCase().charCodeAt(0)),"f"===e&&i.push("f".toUpperCase().charCodeAt(0)),"g"===e&&i.push("g".toUpperCase().charCodeAt(0)),"h"===e&&i.push("h".toUpperCase().charCodeAt(0)),"j"===e&&i.push("j".toUpperCase().charCodeAt(0)),"k"===e&&i.push("k".toUpperCase().charCodeAt(0)),"l"===e&&i.push("l".toUpperCase().charCodeAt(0)),"z"===e&&i.push("z".toUpperCase().charCodeAt(0)),"x"===e&&i.push("x".toUpperCase().charCodeAt(0)),"c"===e&&i.push("c".toUpperCase().charCodeAt(0)),"v"===e&&i.push("v".toUpperCase().charCodeAt(0)),"b"===e&&i.push("b".toUpperCase().charCodeAt(0)),"n"===e&&i.push("n".toUpperCase().charCodeAt(0)),"m"===e&&i.push("m".toUpperCase().charCodeAt(0)),"Q"===e&&i.push("Q".toLowerCase().charCodeAt(0)),"W"===e&&i.push("W".toLowerCase().charCodeAt(0)),"E"===e&&i.push("E".toLowerCase().charCodeAt(0)),"R"===e&&i.push("R".toLowerCase().charCodeAt(0)),"T"===e&&i.push("T".toLowerCase().charCodeAt(0)),"Y"===e&&i.push("Y".toLowerCase().charCodeAt(0)),"U"===e&&i.push("U".toLowerCase().charCodeAt(0)),"I"===e&&i.push("I".toLowerCase().charCodeAt(0)),"O"===e&&i.push("O".toLowerCase().charCodeAt(0)),"P"===e&&i.push("P".toLowerCase().charCodeAt(0)),"A"===e&&i.push("A".toLowerCase().charCodeAt(0)),"S"===e&&i.push("S".toLowerCase().charCodeAt(0)),"D"===e&&i.push("D".toLowerCase().charCodeAt(0)),"F"===e&&i.push("F".toLowerCase().charCodeAt(0)),"G"===e&&i.push("G".toLowerCase().charCodeAt(0)),"H"===e&&i.push("H".toLowerCase().charCodeAt(0)),"J"===e&&i.push("J".toLowerCase().charCodeAt(0)),"K"===e&&i.push("K".toLowerCase().charCodeAt(0)),"L"===e&&i.push("L".toLowerCase().charCodeAt(0)),"Z"===e&&i.push("Z".toLowerCase().charCodeAt(0)),"X"===e&&i.push("X".toLowerCase().charCodeAt(0)),"C"===e&&i.push("C".toLowerCase().charCodeAt(0)),"V"===e&&i.push("V".toLowerCase().charCodeAt(0)),"B"===e&&i.push("B".toLowerCase().charCodeAt(0)),"N"===e&&i.push("N".toLowerCase().charCodeAt(0)),"M"===e&&i.push("M".toLowerCase().charCodeAt(0)),"_"===e&&(i.push(64),i.push(15)),"F1"===t&&i.push(241),"F2"===t&&i.push(242),"F3"===t&&i.push(243),"F4"===t&&i.push(244),"F5"===t&&i.push(245),"F6"===t&&i.push(246),"F7"===t&&i.push(247),"F8"===t&&i.push(248),"Space"===t&&i.push(32),"ArrowLeft"===t&&i.push(8),"ArrowRight"===t&&i.push(9),"ArrowDown"===t&&i.push(10),"ArrowUp"===t&&i.push(11),"Delete"===t&&i.push(1),"Insert"===t&&i.push(16),"Backspace"===t&&n&&i.push(16),"Backspace"!==t||n||i.push(1),"Enter"===t&&i.push(13),"NumpadEnter"===t&&i.push(13),"Escape"===t&&i.push(3),"Escape"===t&&n&&i.push(7),"Home"===t&&i.push(12),"Home"===t&&n&&i.push(2),"Backquote"===t&&i.push(4),o&&!s&&i.push(14),"End"===t&&i.push("@".charCodeAt(0)),"ControlLeft"!==t&&"ControlRight"!==t||s||i.push(14),"AltLeft"!==t&&"AltRight"!=t||i.push(15),"PageUp"===t&&i.push(255),"PageDown"===t&&i.push(35),i}let I=!1,L=!1,B=!1;function P(t){if("ControlLeft"===t.code&&(I=!0),"AltLeft"===t.code&&(L=!0),"ShiftLeft"===t.code&&(B=!0),"ControlRight"===t.code&&(I=!0),"AltRight"===t.code&&(L=!0),"ShiftRight"===t.code&&(B=!0),k(),void 0===S&&(S=t.getModifierState("ScrollLock")),t.getModifierState("ScrollLock")!=S){let e=t.getModifierState("ScrollLock");S=e;let n=e?3:0;J.emu_joy(n),console.log("Joystick emulation "+(3==n?"enabled":"disabled"))}if(t.repeat)t.preventDefault();else{if("Pause"===t.code&&t.altKey&&t.ctrlKey)return J.reset(),void t.preventDefault();{const e=U(t.code,t.key,t.shiftKey,t.ctrlKey,t.altKey,t.getModifierState("AltGraph"));if(0===e.length)return;j.push({type:"press",hardware_keys:e}),M[t.code]=e,t.preventDefault()}}}function D(t){"ControlLeft"===t.code&&(I=!1),"AltLeft"===t.code&&(L=!1),"ShiftLeft"===t.code&&(B=!1),"ControlRight"===t.code&&(I=!1),"AltRight"===t.code&&(L=!1),"ShiftRight"===t.code&&(B=!1);const e=U(t.code,t.key,t.shiftKey,t.ctrlKey,t.altKey,t.getModifierState("AltGraph"));if(0===e.length)return;j.push({type:"release",hardware_keys:e});let n=t.code;if(void 0!==M[n]){let t=M[n];j.push({type:"release",hardware_keys:t}),delete M[n]}t.preventDefault()}const O=document;function N(t){setTimeout((()=>P(F(t))),0),setTimeout((()=>D(F(t))),20),setTimeout((()=>P(F("'"))),40),setTimeout((()=>D(F("'"))),60)}function F(t){return{key:t,code:"",shiftKey:!1,ctrlKey:!1,altKey:!1,getModifierState:()=>!1,preventDefault:()=>!1}}O.onkeydown=P,O.onkeyup=D,O.onkeypress=function(t){"à"==t.key?N("a"):"è"==t.key||"é"==t.key?N("e"):"ì"==t.key?N("i"):"ò"==t.key?N("o"):"ù"==t.key&&N("u")},window.onfocus=function(){Object.keys(M).forEach((t=>{j.push({type:"release",hardware_keys:M[t]}),delete M[t]})),M={}};let j=[],M={},H=!0,W=[],V=[],$=0,q=new _;q.on_error=t=>{console.log("BBS: connection error"),function(t){let e=[];for(let n=0;n<t.length;n++)e.push(255&t.charCodeAt(n));return new Uint8Array(e)}(`${(new Date).toLocaleTimeString()} ERROR CONNECTING TO WEBSOCKET\r`).forEach((t=>V.push(t)))},q.on_open=()=>{console.log("BBS: connected")},q.on_close=()=>{console.log("BBS: disconnected")},q.on_data=t=>{t.forEach((t=>V.push(t)))};let K=0,G=0;function Y(t){let e=null==t?G:t,n=1e3*(e-G);G=e,n>32e3&&(n=32e3),e-K>15&&(function(){for(;j.length>0;){let t=j[0];if(j=j.slice(1),H=0==j.length,"press"===t.type)t.hardware_keys.forEach((t=>J.key_down(t)));else if("release"===t.type&&(t.hardware_keys.forEach((t=>J.key_up(t))),H&&!I&&!L&&!B))for(let t=0;t<256;t++)J.key_up(t)}}(),K=e),J.exec_us(n),requestAnimationFrame(Y)}function z(){var t,e,n,o,r,s;return n=this,o=void 0,s=function*(){J.config(0),J.ex(5e3),J.mem_write(204,1);let n=yield function(){var t,e;return w(this,void 0,void 0,(function*(){let n=window.location.search.split("&").reduce(((t,e)=>{var n=e.split("=");const o=n[0].replace("?","");let r=n[1];return t[o]=r,t}),{});if(void 0!==n.config&&J.config(Number(n.config)),void 0!==n.joy&&(J.emu_joy(Number(n.joy)),console.log("Joystick emulation "+(0!=Number(n.joy)?"enabled":"disabled"))),void 0!==n.load){const t=n.load;t.startsWith("http")?function(t,e,n,o){console.log("externalLoad cmd="+t+" url="+e+" format="+void 0+" subfile="+o);var r=document.getElementsByTagName("head")[0],s=document.createElement("script");s.type="text/javascript",s.src="https://www.mdawson.net/vic20chrome/vic20/prgtojsloader.php?cmd="+t+"&prgurl="+e+"&subfile="+o,r.appendChild(s)}("loadPrg",t):yield h(t)}return void 0!==n.cbm6499&&(y.address=null!==(t=n.wstcp)&&void 0!==t?t:"wss://bbs.sblendorio.eu:8081",y.protocol=null!==(e=n.protocol)&&void 0!==e?e:"bbs",J.set_exrom(!0),J.set_emulate_cbm_6499(!0),J.reset()),n}))}(),o=window.location.href.match(/^http:\/\/(bbs\.sblendorio\.eu|bbs\.retrocampus\.com)/g);q.address=null!==(t=n.wstcp)&&void 0!==t?t:"wss://bbs.sblendorio.eu:8080",q.protocol=null!==(e=n.protocol)&&void 0!==e?e:"bbs",(o||void 0!==n.petsciibbs)&&void 0===n.load&&h("nippur72/terminal.prg"),function(){let t=document.getElementById("canvas");t.width=736,t.height=496}(),J.go()},new((r=void 0)||(r=Promise))((function(t,e){function i(t){try{c(s.next(t))}catch(t){e(t)}}function a(t){try{c(s.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(t){t(n)}))).then(i,a)}c((s=s.apply(n,o||[])).next())}))}let Q;const J={tape:{},init:()=>{},config:t=>{},ex:t=>{},exec:()=>{},exec_us:t=>{},vdp:()=>{},reset:()=>{},key_down:t=>{},key_up:t=>{},joystick:()=>{},emu_joy:t=>{},load_prg:(t,e)=>{},peek:t=>0,poke:(t,e)=>{},cas_port:()=>{},mem_read:t=>0,mem_write:(t,e)=>{},mem_read_word:t=>0,mem_write_word:(t,e)=>{},go:()=>{J.stopped=!1,Y(void 0)},stopped:!0,set_exrom:t=>{},set_cbm_6499_nbank:t=>{},set_emulate_cbm_6499:t=>{},set_external_irq:t=>{}};function X(){return Q}let Z=1.3;function tt(){const t=document.getElementById("canvas");window.innerWidth>window.innerHeight*Z?(t.style.width="130vmin",t.style.height="100vmin"):window.innerWidth>window.innerHeight?(t.style.width="100vmax",t.style.height=1/Z*100+"vmax"):(t.style.width="100vmin",t.style.height=1/Z*100+"vmin"),t.offsetHeight}window.addEventListener("resize",tt),window.addEventListener("dblclick",(function(){document.getElementById("canvas").requestFullscreen(),tt()})),tt(),window.onbeforeunload=function(t){},window.addEventListener("visibilitychange",(function(){"hidden"===document.visibilityState?(J.stopped=!0,function(){if(void 0!==T&&!0===T){if(void 0===g)return;if(void 0===R)return;g.disconnect(R.destination),T=!1}}()):"visible"===document.visibilityState&&(J.go(),x())}));const et=document.getElementById("screen");function nt(t,e){return n=this,o=void 0,s=function*(){/\.prg$/i.test(t)&&(yield a(e))},new((r=void 0)||(r=Promise))((function(t,e){function i(t){try{c(s.next(t))}catch(t){e(t)}}function a(t){try{c(s.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(t){t(n)}))).then(i,a)}c((s=s.apply(n,o||[])).next())}));var n,o,r,s}et.addEventListener("dragover",(function(t){t.stopPropagation(),t.preventDefault(),t.dataTransfer.dropEffect="copy"})),et.addEventListener("drop",(t=>{k(),t.stopPropagation(),t.preventDefault();const e=t.dataTransfer.files;for(let t=0;t<e.length;t++){let n=e[t];const o=new FileReader;o.onload=t=>nt(n.name,new Uint8Array(t.target.result)),o.readAsArrayBuffer(n)}}));window.vdp_screen_update=function(t){const e=X().HEAPU8.subarray(t,t+1705984),n=new Uint8ClampedArray(e),o=new ImageData(n,784,544);A.putImageData(o,-24,-24)},window.audio_buf_ready=function(t,e){if(!T)return;let n=t/X().HEAPF32.BYTES_PER_ELEMENT,o=X().HEAPF32.subarray(n,n+e);v.push([...o])},window.modem_read=function(t){return 55280==t?0==V.length?0:V[0]:55283==t?0==V.length?0:255:55284==t?q.connected?0:2:void 0},window.modem_write=function(t,e){55281==t&&(0==e&&($=0),1==e&&0==$&&(V=V.slice(1),$=1)),55282==t&&(W.push(e),q.send_data_to_bbs(W),W=[],q.connected||q.connect())},window.save_file=function(t,e,n){return i(this,void 0,void 0,(function*(){void 0===e&&(e=J.mem_read_word(43)),void 0===n&&(n=J.mem_read_word(45)-1);const r=[255&e,e>>8];for(let t=0,o=e;o<=n;t++,o++)r.push(J.mem_read(o));const a=new Uint8Array(r);yield function(t,e){return i(this,void 0,void 0,(function*(){let n=new Blob([e],{type:"application/octet-stream"});(0,s.saveAs)(n,t),console.log(`downloaded "${t}"`)}))}(t,a),console.log(`saved "${t}" ${a.length} bytes from ${o(e,4)}h to ${o(n,4)}h`)}))},window.cbm_6499_reset=function(){f.reset()},window.cbm_6499_read=function(t,e){return t<57088?f.read(t):m.cpu_read(t,e)},window.cbm_6499_write=function(t,e,n){t<57088?f.write(t,e):m.cpu_write(t,e,n)},window.c64=J,function(){var t,n,o,r;t=this,n=void 0,r=function*(){yield function(){return t=this,n=void 0,r=function*(){let t=yield e();return J.init=t.cwrap("sys_init",null),J.config=t.cwrap("sys_config",null,["number"]),J.exec=t.cwrap("sys_exec",null),J.ex=t.cwrap("sys_ex",["number"]),J.exec_us=t.cwrap("sys_exec_us",["number"]),J.vdp=t.cwrap("sys_vdp",null),J.reset=t.cwrap("sys_reset",null),J.key_down=t.cwrap("sys_key_down",null,["number"]),J.key_up=t.cwrap("sys_key_up",null,["number"]),J.joystick=t.cwrap("sys_joystick",null,["number"]),J.emu_joy=t.cwrap("sys_set_joystick_type",null,["number"]),J.load_prg=t.cwrap("sys_quick_load",null,["array","number"]),J.peek=t.cwrap("sys_mem_cpu_rd","number",["number"]),J.poke=t.cwrap("sys_mem_cpu_wr",null,["number","number"]),J.cas_port=t.cwrap("sys_cas_port","number"),J.mem_read=J.peek,J.mem_write=J.poke,J.mem_write_word=function(t,e){J.mem_write(t+0,255&e),J.mem_write(t+1,(65280&e)>>8)},J.mem_read_word=function(t){return J.mem_read(t+0)+256*J.mem_read(t+1)},J.set_exrom=t.cwrap("sys_set_exrom",null,["bool"]),J.set_cbm_6499_nbank=t.cwrap("sys_set_cbm_6499_nbank",null,["number"]),J.set_emulate_cbm_6499=t.cwrap("sys_set_emulate_cbm_6499",null,["bool"]),J.set_external_irq=t.cwrap("sys_set_external_irq",null,["bool"]),Q=t,t},new((o=void 0)||(o=Promise))((function(e,s){function i(t){try{c(r.next(t))}catch(t){s(t)}}function a(t){try{c(r.throw(t))}catch(t){s(t)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o((function(t){t(n)}))).then(i,a)}c((r=r.apply(t,n||[])).next())}));var t,n,o,r}(),z()},new((o=void 0)||(o=Promise))((function(e,s){function i(t){try{c(r.next(t))}catch(t){s(t)}}function a(t){try{c(r.throw(t))}catch(t){s(t)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o((function(t){t(n)}))).then(i,a)}c((r=r.apply(t,n||[])).next())}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,